

  In
  
   distributed computing
  
  a
  
   remote procedure call
  
  (
  
   RPC
  
  ) is when a
  
   computer program
  
  causes a procedure (
  
   subroutine
  
  ) to execute in another
  
   address space
  
  (commonly on another computer on a shared network), which is coded as if it were a normal (local) procedure call, without the programmer explicitly coding the details for the remote interaction. That is, the programmer writes essentially the same code whether the subroutine is local to the executing program, or remote.
  

    [1]
   

  This is a form of
  
   client–server
  
  interaction (caller is client, executer is server), typically implemented via a
  
   request–response
  
  message-passing system. The
  
   object-oriented programming
  
  analog is
  
   remote method invocation
  
  (RMI). The RPC model implies a level of
  
   location transparency
  
  , namely that calling procedures is largely the same whether it is local or remote, but usually they are not identical, so local calls can be distinguished from remote calls. Remote calls are usually orders of magnitude slower and less reliable than local calls, so distinguishing them is important.
 
  RPCs are a form of
  
   inter-process communication
  
  (IPC), in that different processes have different address spaces: if on the same host machine, they have distinct
  
   virtual address spaces
  
  , even though the physical address space is the same; while if they are on different hosts, the
  
   physical address
  
  space is different. Many different (often incompatible) technologies have been used to implement the concept.
 


  Response–request protocols date to early distributed computing in the late 1960s, theoretical proposals of remote procedure calls as the model of network operations date to the 1970s, and practical implementations date to the early 1980s. In the 1990s, with the popularity of
  
   object-oriented programming
  
  , the alternative model of
  
   remote method invocation
  
  (RMI) was widely implemented, such as in
  
   Common Object Request Broker Architecture
  
  (CORBA, 1991) and
  
   Java remote method invocation
  
  . RMIs in turn fell in popularity with the rise of the internet, particularly in the 2000s.
 
  Remote procedure calls used in modern operating systems trace their roots back to the
  
   RC 4000 multiprogramming system
  
  ,
  

    [2]
   

  which used a request-response communication protocol for process synchronization.
  

    [3]
   

  The idea of treating network operations as remote procedure calls goes back at least to the 1970s in early
  
   ARPANET
  
  documents.
  

    [4]
   

  In 1978,
  
   Per Brinch Hansen
  
  proposed Distributed Processes, a language for distributed computing based on "external requests" consisting of procedure calls between processes.
  

    [5]
   



   Bruce Jay Nelson
  
  is generally credited with coining the term "remote procedure call" (1981),
  

    [6]
   

  and the first practical implementation was by Andrew Birrel and Bruce Nelson, called Lupine, in the
  
   Cedar
  
  environment at
  
   Xerox PARC
  
  .
  

    [7]
   



    [8]
   



    [9]
   

  Lupine automatically generated stubs, providing type-safe bindings, and used an efficient protocol for communication.
  

    [8]
   

  One of the first business uses of RPC was by
  
   Xerox
  
  under the name "Courier" in 1981. The first popular implementation of RPC on
  
   Unix
  
  was
  
   Sun's RPC
  
  (now called ONC RPC), used as the basis for
  
   Network File System
  
  .
 
  RPC is a kind of
  
   request–response
  
  protocol. An RPC is initiated by the
  
   client
  
  , which sends a request message to a known remote
  
   server
  
  to execute a specified procedure with supplied parameters. The remote server sends a response to the client, and the application continues its process. While the server is processing the call, the client is blocked (it waits until the server has finished processing before resuming execution), unless the client sends an asynchronous request to the server, such as an XHTTP call. There are many variations and subtleties in various implementations, resulting in a variety of different (incompatible) RPC protocols.
 
  An important difference between remote procedure calls and local calls is that remote calls can fail because of unpredictable network problems. Also, callers generally must deal with such failures without knowing whether the remote procedure was actually invoked.
  
   Idempotent
  
  procedures (those that have no additional effects if called more than once) are easily handled, but enough difficulties remain that code to call remote procedures is often confined to carefully written low-level subsystems.
 
  To let different clients access servers, a number of standardized RPC systems have been created. Most of these use an
  
   interface description language
  
  (IDL) to let various platforms call the RPC. The IDL files can then be used to generate code to interface between the client and servers.
 
  Notable RPC implementations and analogues include:
 