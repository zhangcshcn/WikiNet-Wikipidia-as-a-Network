

  In
  
   computing
  
  , a
  
   shell
  
  is a
  
   user interface
  
  for access to an
  
   operating system
  
  's services. In general, operating system shells use either a
  
   command-line interface
  
  (CLI) or
  
   graphical user interface
  
  (GUI), depending on a computer's role and particular operation. It is named a shell because it is a layer around the operating system
  
   kernel
  
  .
  
   [
   


      citation needed
     


   ]
  
  .
 
  The design of a shell is guided by
  
   cognitive ergonomics
  
  and the goal is to achieve the best
  
   workflow
  
  possible for the intended tasks; the design can be constricted by the available computing power (for example, of the
  
   CPU
  
  ) or the available amount of graphics memory. The design of a shell is also dictated by the employed
  
   computer periphery
  
  , such as
  
   computer keyboard
  
  ,
  
   pointing device
  
  (a mouse with one button, or one with five buttons, or a
  
   3D mouse
  
  ) or
  
   touchscreen
  
  , which is the direct
  
   human–machine interface
  
  .
 
  CLI shells allow some operations to be performed faster, especially when a proper GUI has not been or cannot be created; however, they require the user to be familiar with commands and their calling
  
   syntax
  
  , and to understand concepts about the shell-specific scripting language (for example
  
   bash script
  
  ), which may prove difficult for those with little computer experience. CLIs are also easier to be operated via
  
   refreshable braille display
  
  and provide certain advantages to
  
   screen readers
  
  .
 
  Graphical shells place a low burden on beginning computer users, and they are characterized as being simple and easy to use. With the widespread adoption of programs with GUIs, the use of graphical shells has gained greater adoption. Since graphical shells come with certain disadvantages, most GUI-enabled operating systems also provide additional CLI shells.
 


  Operating systems provide various services to their users, including
  
   file management
  
  ,
  
   process
  
  management (running and terminating
  
   applications
  
  ),
  
   batch processing
  
  , and operating system monitoring and configuration.
 
  Most operating system shells are not
  
   direct
  
  interfaces to the underlying kernel, even if a shell communicates with the user via
  
   peripheral devices
  
  attached to the computer directly. Shells are actually special applications that use the kernel
  
   API
  
  in just the same way as it is used by other application programs. A shell manages the user–system interaction by prompting users for input, interpreting their input, and then handling an output from the underlying operating system (much like a
  
   read–eval–print loop
  
  , REPL).
  

    [1]
   

  Since the operating system shell is actually an application, it may easily be replaced with another similar application, for most operating systems.
 
  In addition to shells running on local systems, there are different ways to make remote systems available to local users; such approaches are usually referred to as
  
   remote access
  
  or
  
   remote administration
  
  . Initially available on
  
   multi-user
  

   mainframes
  
  , which provided text-based UIs for each active user
  
   simultaneously
  
  by means of a
  
   text terminal
  
  connected to the mainframe via
  
   serial line
  
  or
  
   modem
  
  , remote access has extended to
  
   Unix-like
  
  systems and Microsoft Windows. On Unix-like systems,
  
   Secure Shell
  
  protocol is usually used for text-based shells, while
  
   SSH tunneling
  
  can be used for
  
   X Window System
  
  –based graphical user interfaces (GUIs). On Microsoft Windows,
  
   Remote Desktop Protocol
  
  can be used to provide GUI remote access.
 
  Most operating system shells fall into one of two categories –  command-line and graphical. Command line shells provide a command-line interface (CLI) to the operating system, while graphical shells provide a graphical user interface (GUI). Other possibilities, although not so common, include
  
   voice user interface
  
  and various implementations of a
  
   text-based user interface
  
  (TUI) that are not CLI. The relative merits of CLI- and GUI-based shells are often debated.
 
  A
  
   command-line interface
  
  (CLI) is an operating system shell that uses
  
   alphanumeric
  
  characters typed on a keyboard to provide instructions and data to the operating system, interactively. For example, a
  
   teletypewriter
  
  can send codes representing keystrokes to a command interpreter program running on the computer; the command interpreter parses the sequence of keystrokes and responds with an error message if it cannot recognize the sequence of characters, or it may carry out some other program action such as loading an application program, listing files, logging in a user and many others. Operating systems such as UNIX have a large variety of
  
   shell
  
  programs with different commands, syntax and capabilities. Some operating systems had only a single style of command interface; commodity operating systems such as
  
   MS-DOS
  
  came with a standard command interface but third-party interfaces were also often available, providing additional features or functions such as menuing or remote program execution.
 
  Application programs may also implement a command-line interface. For example, in Unix-like systems, the
  
   telnet
  
  program has a number of commands for controlling a link to a remote computer system. Since the commands to the program are made of the same keystrokes as the data being sent to a remote computer, some means of distinguishing the two are required. An
  
   escape sequence
  
  can be defined, using either a special local keystroke that is never passed on but always interpreted by the local system. The program becomes modal, switching between interpreting commands from the keyboard or passing keystrokes on as data to be processed.
 
  A feature of many command-line shells is the ability to save sequences of commands for re-use. A data file can contain sequences of commands which the CLI can be made to follow as if typed in by a user. Special features in the CLI may apply when it is carrying out these stored instructions. Such
  
   batch files
  
  (script files) can be used repeatedly to automate routine operations such as initializing a set of programs when a system is restarted. Batch mode use of shells usually involves structures, conditionals, variables, and other elements of programming languages; some have the bare essentials needed for such a purpose, others are very sophisticated programming languages in and of themselves. Conversely, some programming languages can be used interactively from an operating system shell or in a purpose-built program.
 
  The command-line shell may offer features such as
  
   command-line completion
  
  , where the interpreter expands commands based on a few characters input by the user. A command-line interpreter may offer a history function, so that the user can recall earlier commands issued to the system and repeat them, possibly with some editing. Since all commands to the operating system had to be typed by the user, short command names and compact systems for representing program options were common. Short names were sometimes hard for a user to recall, and early systems lacked the storage resources to provide a detailed on-line user instruction guide.
 
  Various
  
   Unix shells
  
  and their derivatives including the
  
   COMMAND.COM
  
  exist.
 
  Graphical shells provide means for manipulating programs based on
  
   graphical user interface
  
  (GUI), by allowing for operations such as opening, closing, moving and resizing
  
   windows
  
  , as well as switching
  
   focus
  
  between windows. Graphical shells may be included with
  
   desktop environments
  
  or come separately, even as a set of loosely coupled utilities.
 
  Most graphical user interfaces develop the
  
   metaphor of an "electronic desktop"
  
  , where data files are represented as if they were paper documents on a desk, and application programs similarly have graphical representations instead of being invoked by command names.
 
  Modern versions of the
  
   Microsoft Windows
  
  operating system use the
  
   Windows shell
  
  as their shell. Windows Shell provides the familiar
  
   desktop environment
  
  ,
  
   start menu
  
  , and
  
   task bar
  
  , as well as a
  
   graphical user interface
  
  for accessing the file management functions of the operating system. Older versions also include
  
   Program Manager
  
  , which was the shell for the 3.x series of Microsoft Windows, and which in fact ships with later versions of Windows of both the 95 and NT types at least through Windows XP. The interfaces of Windows versions 1 and 2 were markedly different.
 
  Desktop applications are also considered shells, as long as they use a third-party engine. Likewise, many individuals and developers dissatisfied with the interface of Windows Explorer have developed software that either alters the functioning and appearance of the shell or replaces it entirely.
  
   WindowBlinds
  
  by
  
   StarDock
  
  is a good example of the former sort of application.
  
   LiteStep
  
  and
  
   Emerge Desktop
  
  are good examples of the latter.
 
  Interoperability programmes and purpose-designed software lets Windows users use equivalents of many of the various Unix-based GUIs discussed below, as well as Macintosh. An equivalent of the OS/2 Presentation Manager for version 3.0 can run some OS/2 programmes under some conditions using the OS/2
  
   environmental subsystem
  
  in versions of Windows NT.
 
  Graphical shells typically build on top of a
  
   windowing system
  
  . In the case of
  
   X Window System
  
  or
  
   Wayland
  
  , the shell consists of an
  
   X window manager
  
  or a
  
   Wayland compositor
  
  , respectively, as well as of one or multiple programs providing the functionality to start installed applications, to manage open windows and virtual desktops, and often to support a widget engine.
 
  In the case of
  
   macOS
  
  ,
  
   Quartz
  
  could be thought of as the windowing system, and the shell consists of the
  
   Finder
  
  ,
  

    [2]
   

  the
  
   Dock
  
  ,
  

    [2]
   

  SystemUIServer,
  

    [2]
   

  and
  
   Mission Control
  
  .
  

    [3]
   


  "Shell" is also used loosely to describe application software that is "built around" a particular component, such as web browsers and email clients, in analogy to the shells found in nature.
 
  In
  
   expert systems
  
  , a shell is a piece of software that is an "empty" expert system without the knowledge base for any particular application.
  

    [4]
   

