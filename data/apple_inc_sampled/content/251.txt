

     com.netscape.javascript-source
    

      See also
     


   JavaScript
  
  (
  


     /
     

       ˈ
      

       dʒ
      

       ɑː
      

       v
      

       ə
      

       ˌ
      

       s
      

       k
      

       r
      

       ɪ
      

       p
      

       t
      

     /
    




    [6]
   

  ) is a
  
   high-level
  
  ,
  
   dynamic
  
  ,
  
   untyped
  
  , and
  
   interpreted
  

   programming language
  
  .
  

    [7]
   

  It has been standardized in the
  
   ECMAScript
  
  language specification.
  

    [8]
   

  Alongside
  
   HTML
  
  and
  
   CSS
  
  , JavaScript is one of the three core technologies of
  
   World Wide Web
  

   content production
  
  ; the majority of
  
   websites
  
  employ it, and all modern
  
   Web browsers
  
  support it without the need for
  
   plug-ins
  
  .
  

    [7]
   

  JavaScript is
  
   prototype-based
  
  with
  
   first-class functions
  
  , making it a
  
   multi-paradigm
  
  language, supporting
  
   object-oriented
  
  ,
  

    [9]
   


   imperative
  
  , and
  
   functional
  

   programming styles
  
  .
  

    [7]
   

  It has an
  
   API
  
  for working with text,
  
   arrays
  
  , dates and
  
   regular expressions
  
  , but does not include any
  
   I/O
  
  , such as networking, storage, or graphics facilities, relying for these upon the host environment in which it is embedded.
  

    [8]
   


  Although there are strong outward similarities between JavaScript and Java, including language name,
  
   syntax
  
  , and respective
  
   standard libraries
  
  , the two are distinct languages and differ greatly in their design. JavaScript was influenced by programming languages such as
  
   Self
  
  and
  
   Scheme
  
  .
  

    [10]
   


  JavaScript is also used in environments that are not Web-based, such as
  
   PDF
  
  documents,
  
   site-specific browsers
  
  , and
  
   desktop widgets
  
  . Newer and faster JavaScript
  
   virtual machines
  
  (VMs) and platforms built upon them have also increased the popularity of JavaScript for
  
   server-side
  

   Web applications
  
  . On the
  
   client side
  
  , developers have traditionally implemented JavaScript as an
  
   interpreted
  
  language, but more recent browsers perform
  
   just-in-time compilation
  
  . Programmers also use JavaScript in
  
   video-game development
  
  , in crafting desktop and mobile applications, and in server-side
  
   network programming
  
  with run-time environments such as
  
   Node.js
  
  .
 


  In 1993, the
  
   National Center for Supercomputing Applications
  
  (NCSA), a unit of the
  
   University of Illinois at Urbana-Champaign
  
  , released
  
   NCSA Mosaic
  
  , the first popular graphical
  
   Web browser
  
  , which played an important part in expanding the growth of the nascent
  
   World Wide Web
  
  . In 1994, a company called
  
   Mosaic Communications
  
  was founded in
  
   Mountain View
  
  ,
  
   California
  
  and employed many of the original NCSA Mosaic authors to create
  
   Mosaic Netscape
  
  . However, it intentionally shared no code with NCSA Mosaic. The internal codename for the company's browser was Mozilla, which stood for "Mosaic killer", as the company's goal was to displace NCSA Mosaic as the world's number one web browser. The first version of the Web browser, Mosaic Netscape 0.9, was released in late 1994. Within four months it had already taken three-quarters of the browser market and became the main browser for Internet in the 1990s. To avoid trademark ownership problems with the NCSA, the browser was subsequently renamed Netscape Navigator in the same year, and the company took the name Netscape Communications.
 
  Netscape Communications realized that the Web needed to become more dynamic.
  
   Marc Andreessen
  
  , the founder of the company believed that
  
   HTML
  
  needed a "glue language" that was easy to use by Web designers and part-time programmers to assemble components such as images and plugins, where the code could be written directly in the Web page markup. In 1995, the company recruited
  
   Brendan Eich
  
  with the goal of embedding the
  
   Scheme
  
  programming language into its Netscape Navigator. Before he could get started, Netscape Communications collaborated with
  
   Sun Microsystems
  
  to include in Netscape Navigator Sun's more static programming language
  
   Java
  
  , in order to compete with
  
   Microsoft
  
  for user adoption of Web technologies and platforms.
  

    [11]
   

  Netscape Communications then decided that the scripting language they wanted to create would complement Java and should have a similar syntax, which excluded adopting other languages such as
  
   Perl
  
  ,
  
   Python
  
  ,
  
   TCL
  
  , or Scheme. To defend the idea of JavaScript against competing proposals, the company needed a prototype. Eich wrote one in 10 days, in May 1995.
 
  Although it was developed under the name
  
   Mocha
  
  , the language was officially called
  
   LiveScript
  
  when it first shipped in beta releases of Netscape Navigator 2.0 in September 1995, but it was renamed
  
   JavaScript
  


    [2]
   

  when it was deployed in the Netscape Navigator 2.0 beta 3 in December.
  

    [12]
   

  The final choice of name caused confusion, giving the impression that the language was a spin-off of the Java programming language, and the choice has been characterized as a marketing ploy by Netscape to give JavaScript the cachet of what was then the hot new Web programming language.
 
  There is a common misconception that JavaScript was influenced by an earlier Web page scripting language developed by
  
   Nombas
  
  named C-- (not to be confused with the later
  
   C--
  
  created in 1997).
  

    [13]
   



    [14]
   

  Brendan Eich, however, had never heard of C-- before he created LiveScript.
  

    [15]
   

  Nombas did pitch their embedded Web page scripting to Netscape, though Web page scripting was not a new concept, as shown by the
  
   ViolaWWW
  
  Web browser.
  

    [16]
   

  Nombas later switched to offering JavaScript instead of C-- in their ScriptEase product and was part of the TC39 group that standardized ECMAScript.
  

    [17]
   


  In December 1995, soon after releasing JavaScript for browsers, Netscape introduced an implementation of the language for
  
   server-side scripting
  
  with
  
   Netscape Enterprise Server
  
  .
  

    [18]
   


  Since the mid-2000s, additional
  
   server-side JavaScript implementations
  
  have been introduced, such as
  
   Node.js
  
  in 2009.
  

    [19]
   


  Microsoft script technologies including
  
   VBScript
  
  and
  
   JScript
  
  were released in 1996. JScript, a reverse-engineered implementation of Netscape's JavaScript, was part of
  
   Internet Explorer 3
  
  . JScript was also available for server-side scripting in
  
   Internet Information Server
  
  . Internet Explorer 3 also included Microsoft's first support for CSS and various extensions to HTML, but in each case the implementation was noticeably different to that found in Netscape Navigator at the time.
  

    [20]
   



    [21]
   

  These differences made it difficult for designers and programmers to make a single website work well in both browsers, leading to the use of "best viewed in Netscape" and "best viewed in Internet Explorer" logos that characterized these early years of the
  
   browser wars
  
  .
  

    [22]
   

  JavaScript began to acquire a reputation for being one of the roadblocks to a cross-platform and standards-driven Web. Some developers took on the difficult task of trying to make their sites work in both major browsers, but many could not afford the time.
  

    [20]
   

  With the release of
  
   Internet Explorer 4
  
  , Microsoft introduced the concept of
  
   Dynamic HTML
  
  , but the differences in language implementations and the different and proprietary
  
   Document Object Models
  
  remained and were obstacles to widespread take-up of JavaScript on the Web.
  

    [20]
   


  In November 1996, Netscape submitted JavaScript to
  
   Ecma International
  
  to carve out a standard specification, which other browser vendors could then implement based on the work done at Netscape. This led to the official release of the language specification
  
   ECMAScript
  
  published in the first edition of the ECMA-262 standard in June 1997, with JavaScript being the most well known of the implementations.
  
   ActionScript
  
  and
  
   JScript
  
  are other well-known implementations of ECMAScript, with extensions.
 
  The standards process continued in cycles, with the release of ECMAScript 2 in June 1998, which brings some modifications to conform to the ISO/IEC 16262 international standard. The release of ECMAScript 3 followed in December 1999, which is the baseline for modern day JavaScript. The original ECMAScript 4 work led by Waldemar Horwat (then at Netscape, now at
  
   Google
  
  ) started in 2000 and at first,
  
   Microsoft
  
  seemed to participate and even implemented some of the proposals in their
  
   JScript .NET
  
  language.
 
  Over time it was clear though that Microsoft had no intention of cooperating or implementing proper JavaScript in Internet Explorer, even though they had no competing proposal and they had a partial (and diverged at this point) implementation on the
  
   .NET
  
  server side. So by 2003, the original ECMAScript 4 work was mothballed.
 
  The next major event was in 2005, with two major happenings in JavaScript's history. First, Brendan Eich and Mozilla rejoined Ecma International as a not-for-profit member and work started on
  
   ECMAScript for XML
  
  (E4X), the ECMA-357 standard, which came from ex-Microsoft employees at
  
   BEA Systems
  
  (originally acquired as Crossgain). This led to working jointly with
  
   Macromedia
  
  (later acquired by
  
   Adobe Systems
  
  ), who were implementing E4X in ActionScript 3 (ActionScript 3 was a fork of original ECMAScript 4).
 
  So, along with Macromedia, work restarted on ECMAScript 4 with the goal of standardizing what was in ActionScript 3. To this end, Adobe Systems released the ActionScript Virtual Machine 2, code named
  
   Tamarin
  
  , as an
  
   open source
  
  project. But Tamarin and ActionScript 3 were too different from web JavaScript to converge, as was realized by the parties in 2007 and 2008.
 
  Alas, there was still turmoil between the various players;
  
   Douglas Crockford
  
  —then at
  
   Yahoo!
  
  —joined forces with Microsoft in 2007 to oppose ECMAScript 4, which led to the ECMAScript 3.1 effort. The development of ECMAScript 4 was never completed, but that work influenced subsequent versions.
  

    [23]
   


  While all of this was happening, the open source and developer communities set to work to revolutionize what could be done with JavaScript. This community effort was sparked in 2005 when
  
   Jesse James Garrett
  
  released a white paper in which he coined the term
  
   Ajax
  
  , and described a set of technologies, of which JavaScript was the backbone, used to create web applications where data can be loaded in the background, avoiding the need for full page reloads and leading to more dynamic applications. This resulted in a renaissance period of JavaScript usage spearheaded by open source libraries and the communities that formed around them, with libraries such as
  
   Prototype
  
  ,
  
   jQuery
  
  ,
  
   Dojo Toolkit
  
  ,
  
   MooTools
  
  and others being released.
 
  In July 2008, the disparate parties on either side came together in Oslo. This led to the eventual agreement in early 2009 to rename ECMAScript 3.1 to ECMAScript 5 and drive the language forward using an agenda that is known as Harmony. ECMAScript 5 was finally released in December 2009.
 
  In June 2011, ECMAScript 5.1 was released to fully align with the third edition of the ISO/IEC 16262 international standard. ECMAScript 2015 was released in June 2015. The current version is ECMAScript 2016, released in June 2016.
  

    [24]
   


  JavaScript has become one of the most popular programming languages on the Web. Initially, however, many professional programmers denigrated the language because, among other reasons, its target audience consisted of Web authors and other such "amateurs".
  

    [25]
   

  The advent of
  
   Ajax
  
  returned JavaScript to the spotlight and brought more professional programming attention. The result was a proliferation of comprehensive
  
   frameworks and libraries
  
  , improved JavaScript programming practices, and increased usage of JavaScript outside Web browsers, as seen by the proliferation of
  
   server-side JavaScript
  
  platforms.
 
  In January 2009, the
  
   CommonJS
  
  project was founded with the goal of specifying a common standard library mainly for JavaScript development outside the browser.
  

    [26]
   


  With the rise of
  
   single-page applications
  
  and JavaScript-heavy sites, it is increasingly being used as a compile target for
  
   source-to-source compilers
  
  from both
  
   dynamic languages
  
  and
  
   static languages
  
  .
 
  "JavaScript" is a
  
   trademark
  
  of
  
   Oracle Corporation
  
  in the United States.
  

    [27]
   

  It is used under license for technology invented and implemented by Netscape Communications and current entities such as the
  
   Mozilla Foundation
  
  .
  

    [28]
   


  The following features are common to all conforming ECMAScript implementations, unless explicitly specified otherwise.
 
  All modern Web browsers support JavaScript with built-in interpreters.
 
  JavaScript supports much of the
  
   structured programming
  
  syntax from
  
   C
  
  (e.g.,
  
   if
  
  statements,
  
   while
  
  loops,
  
   switch
  
  statements,
  
   do while
  
  loops, etc.). One partial exception is
  
   scoping
  
  : JavaScript originally had only
  
   function scoping
  
  with
  
   var
  
  . ECMAScript 2015 added a
  
   let
  
  keyword for block scoping, meaning JavaScript now has both function and block scoping. Like C, JavaScript makes a distinction between
  
   expressions
  
  and
  
   statements
  
  . One syntactic difference from C is
  
   automatic semicolon insertion
  
  , which allows the semicolons that would normally terminate statements to be omitted.
  

    [29]
   


  JavaScript is almost entirely
  
   object-based
  
  . In JavaScript, an
  
   object
  
  is an
  
   associative array
  
  , augmented with a prototype (see below); each string key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (
  
   obj.x = 10
  
  ) and bracket notation (
  
   obj['x'] = 10
  
  ). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object's prototype inheritance chain) can be enumerated using a
  
   for...in
  
  loop.
 
  JavaScript has a small number of built-in objects, including
  
   Function
  
  and
  
   Date
  
  .
 
  A
  
   function
  
  is
  
   first-class
  
  ; a function is considered to be an object. As such, a function may have properties and methods, such as
  
   .call()
  
  and
  
   .bind()
  
  .
  

    [37]
   

  A
  
   nested
  
  function is a function defined within another function. It is created each time the outer function is invoked. In addition, each nested function forms a
  
   lexical closure
  
  : The
  
   lexical scope
  
  of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.
  

    [38]
   

  JavaScript also supports
  
   anonymous functions
  
  .
 
  JavaScript supports implicit and explicit
  
   delegation
  
  .
 
  JavaScript is officially managed by
  
   Mozilla Foundation
  
  , and new language features are added periodically. However, only some
  
   JavaScript engines
  
  support these new features:
 

   Variables
  
  in JavaScript can be defined using the
  
   var
  
  keyword:
  

    [48]
   


  Note the
  
   comments
  
  in the example above, both of which were preceded with two
  
   forward slashes
  
  .
 
  There is no built-in
  
   I/O
  
  functionality in JavaScript; the run-time environment provides that. The ECMAScript specification in edition 5.1 mentions:
  

    [49]
   


   … indeed, there are no provisions in this specification for input of external data or output of computed results.
  
  However, most runtime environments have a
  
   console
  
  object
  

    [50]
   

  that can be used to print output. Here is a minimalist
  
   Hello World program
  
  in
  
   JavaScript
  
  :
 
  A simple
  
   recursive
  
  function:
 
  An
  
   anonymous function
  
  (or lambda):
 
  This example shows that in JavaScript,
  
   function closures
  
  captures their non-local variables
  
   by reference
  
  .
 

   Variadic function
  
  demonstration (
  
   arguments
  
  is a special
  
   variable
  
  ):
  

    [51]
   



   Immediately-invoked function expressions
  
  are often used to create modules, as before ECMAScript 2015 there was not built-in construct in the language. Modules allow gathering properties and methods in a namespace and making some of them private:
 
  This sample code displays various JavaScript features.
 
  The following output should be displayed in the browser window.
 
  The most common use of JavaScript is to add client-side behavior to
  
   HTML
  
  pages, also known as
  
   Dynamic HTML
  
  (DHTML). Scripts are embedded in or included from
  
   HTML
  
  pages and interact with the
  
   Document Object Model
  
  (DOM) of the page. Some simple examples of this usage are:
 
  Because JavaScript code can run locally in a user's browser (rather than on a remote server), the browser can respond to user actions quickly, making an application more responsive. Furthermore, JavaScript code can detect user actions that HTML alone cannot, such as individual keystrokes. Applications such as
  
   Gmail
  
  take advantage of this: much of the user-interface logic is written in JavaScript, and JavaScript dispatches requests for information (such as the content of an e-mail message) to the server. The wider trend of Ajax programming similarly exploits this strength.
 
  A
  
   JavaScript engine
  
  (also known as JavaScript interpreter or JavaScript implementation) is an
  
   interpreter
  
  that interprets JavaScript
  
   source code
  
  and executes the
  
   script
  
  accordingly. The first JavaScript engine was created by Brendan Eich at Netscape, for the Netscape Navigator Web browser. The engine, code-named
  
   SpiderMonkey
  
  , is implemented in
  
   C
  
  . It has since been updated (in JavaScript 1.5) to conform to ECMAScript 3. The
  
   Rhino
  
  engine, created primarily by Norris Boyd (formerly at Netscape, now at Google) is a JavaScript implementation in
  
   Java
  
  . Rhino, like SpiderMonkey, is ECMAScript 3 compliant.
 
  A Web browser is by far the most common host environment for JavaScript. Web browsers typically create "host objects" to represent the DOM in JavaScript. The
  
   Web server
  
  is another common host environment. A
  
   JavaScript Web server
  
  would typically expose host objects representing
  
   HTTP
  
  request and response objects, which a JavaScript program could then interrogate and manipulate to dynamically generate Web pages.
 
  Because JavaScript is the only language that the most popular browsers share support for, it has become a
  
   target language
  
  for many frameworks in other languages, even though JavaScript was never intended to be such a language.
  

    [53]
   

  Despite the performance limitations inherent to its dynamic nature, the increasing speed of JavaScript engines has made the language a surprisingly feasible compilation target.
 
  Below is a minimal example of a standards-conforming Web page containing JavaScript (using
  
   HTML 5
  
  syntax) and the DOM:
 
  Because JavaScript runs in widely varying environments, an important part of testing and debugging is to test and verify that the JavaScript works across multiple browsers.
 
  The DOM interfaces for manipulating Web pages are not part of the ECMAScript standard, or of JavaScript itself. Officially, the DOM interfaces are defined by a separate standardization effort by the
  
   W3C
  
  ; in practice, browser implementations differ from the standards and from each other, and not all browsers execute JavaScript.
 
  To deal with these differences, JavaScript authors can attempt to write standards-compliant code that will also be executed correctly by most browsers; failing that, they can write code that checks for the presence of certain browser features and behaves differently if they are not available.
  

    [54]
   

  In some cases, two browsers may both implement a feature but with different behavior, and authors may find it practical to detect what browser is running and change their script's behavior to match.
  

    [55]
   



    [56]
   

  Programmers may also use libraries or toolkits that take browser differences into account.
 
  Furthermore, scripts may not work for some users. For example, a user may:
 
  To support these users, Web authors can try to create pages that
  
   degrade gracefully
  
  on user agents (browsers) that do not support the page's JavaScript. In particular, the page should remain usable albeit without the extra features that the JavaScript would have added. An alternative approach that many find preferable is to first author content using basic technologies that work in all browsers, then enhance the content for users that have JavaScript enabled. This is known as
  
   progressive enhancement
  
  .
 
  JavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the Web. Browser authors contain this risk using two restrictions. First, scripts run in a
  
   sandbox
  
  in which they can only perform Web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the
  
   same origin policy
  
  : scripts from one Web site do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox.
 
  There are subsets of general JavaScript—ADsafe, Secure ECMAScript (SES)—that provide greater level of security, especially on code created by third parties (such as advertisements).
  

    [57]
   



    [58]
   


   Caja
  
  is another project for safe embedding and isolation of third-party JavaScript and HTML.
 

   Content Security Policy
  
  is the main intended method of ensuring that only trusted code is executed on a Web page.
 
  A common JavaScript-related security problem is
  
   cross-site scripting
  
  (XSS), a violation of the
  
   same-origin policy
  
  . XSS vulnerabilities occur when an attacker is able to cause a target Web site, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim's authorization. A solution to XSS vulnerabilities is to use
  
   HTML escaping
  
  whenever displaying untrusted data.
 
  Some browsers include partial protection against
  
   reflected
  
  XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server side can fully prevent XSS.
 
  XSS vulnerabilities can also occur because of implementation mistakes by browser authors.
  

    [59]
   


  Another cross-site vulnerability is
  
   cross-site request forgery
  
  (CSRF). In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user didn't intend at a target site (like transferring money at a bank). It works because, if the target site relies only on cookies to authenticate requests, then requests initiated by code on the attacker's site will carry the same legitimate login credentials as requests initiated by the user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help.
 
  "JavaScript hijacking" is a type of CSRF attack in which a
  
   <script>
  
  tag on an attacker's site exploits a page on the victim's site that returns private information such as
  
   JSON
  
  or JavaScript. Possible solutions include:
 
  Developers of client-server applications must recognize that untrusted clients may be under the control of attackers. The application author cannot assume that his JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are:
 
  Package management systems such as
  
   NPM
  
  and
  
   Bower
  
  are popular with JavaScript developers. Such systems allow a developer to easily manage their program's dependencies upon other developer's program libraries. Developers trust that the maintainers of the libraries will keep it secure and up to date, but that is not always the case. A vulnerability has emerged because of this blind trust. Relied upon libraries can release an update that causes bugs or vulnerabilities to appear in all programs that rely upon the library. Inversely, a library can go unpatched with known vulnerabilities out in the wild. In a study done looking over a sample of 133k websites, researchers found 37% of the websites included a library with at-least one known vulnerability.
  

    [61]
   

  "The median lag between the oldest library version used on each website and the newest available version of that library is 1,177 days in ALEXA, and development of some libraries still in active use ceased years ago."
  

    [61]
   

  Another possibility is that the maintainer of a library may remove the library entirely. This occurred in March 2016 when Azer Koçulu removed his repository from
  
   NPM
  
  . This caused all tens of thousands of programs and websites depending upon his libraries to break.
  

    [62]
   



    [63]
   


  JavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as
  
   buffer overflows
  
  . These flaws can allow attackers to write scripts that would run any code they wish on the user's system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system's
  
   API
  
  with superuser privileges.
 
  These flaws have affected major browsers including Firefox,
  

    [64]
   

  Internet Explorer,
  

    [65]
   

  and Safari.
  

    [66]
   


  Plugins, such as video players,
  
   Adobe Flash
  
  , and the wide range of
  
   ActiveX
  
  controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past).
  

    [67]
   



    [68]
   


  In Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges.
  

    [69]
   


   Google Chrome
  
  similarly confines its page renderers to their own "sandbox".
 
  Web browsers are capable of running JavaScript outside the sandbox, with the privileges necessary to, for example, create or delete files. Of course, such privileges aren't meant to be granted to code from the Web.
 
  Incorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer
  

    [70]
   

  and Firefox.
  

    [71]
   

  In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer.
  

    [72]
   



   Microsoft Windows
  
  allows JavaScript source files on a computer's hard drive to be launched as general-purpose, non-sandboxed programs (see:
  
   Windows Script Host
  
  ). This makes JavaScript (like
  
   VBScript
  
  ) a theoretically viable vector for a
  
   Trojan horse
  
  , although JavaScript Trojan horses are uncommon in practice.
  

    [73]
   


   [
   


      not in citation given
     


   ]
  

  In 2017 a JavaScript based attack via browser was demonstrated that could bypass
  
   ASLR
  
  . It's called "ASLR⊕Cache" or AnC.
  

    [74]
   



    [75]
   


  In addition to Web browsers and servers, JavaScript interpreters are embedded in a number of tools. Each of these applications provides its own
  
   object model
  
  that provides access to the host environment. The core JavaScript language remains mostly the same in each application.
 
  Within JavaScript, access to a
  
   debugger
  
  becomes invaluable when developing large, non-trivial programs. Because there can be implementation differences between the various browsers (particularly within the DOM), it is useful to have access to a debugger for each of the browsers that a Web application targets.
  

    [95]
   


  Script debuggers are integrated within
  
   Internet Explorer
  
  ,
  
   Firefox
  
  ,
  
   Safari
  
  ,
  
   Google Chrome
  
  ,
  
   Opera
  
  and
  
   Node.js
  
  .
  

    [96]
   



    [97]
   



    [98]
   


  In addition to the native
  
   Internet Explorer Developer Tools
  
  , three debuggers are available for Internet Explorer:
  
   Microsoft Visual Studio
  
  is the richest of the three, closely followed by
  
   Microsoft Script Editor
  
  (a component of
  
   Microsoft Office
  
  ),
  

    [99]
   

  and finally the free
  
   Microsoft Script Debugger
  
  that is far more basic than the other two. The free
  
   Microsoft Visual Web Developer Express
  
  provides a limited version of the JavaScript debugging functionality in Microsoft Visual Studio. Internet Explorer has included developer tools since version 8.
 
  In comparison to Internet Explorer, Firefox has a more comprehensive set of developer tools, which include a debugger as well. Old versions of Firefox without these tools used a
  
   Firefox addon
  
  called
  
   Firebug
  
  , or the older
  
   Venkman
  
  debugger. Also,
  
   WebKit
  
  's Web Inspector includes a JavaScript debugger,
  

    [100]
   

  which is used in
  
   Safari
  
  . A modified version called Blink DevTools is used in
  
   Google Chrome
  
  .
  
   Node.js
  
  has Node Inspector, an interactive debugger that integrates with the Blink DevTools, available in
  
   Google Chrome
  
  .
  
   Opera
  
  includes a set of tools called
  
   Dragonfly
  
  .
  

    [101]
   




  In addition to the native computer software, there are online JavaScript IDEs, debugging aids that are themselves written in JavaScript and built to run on the Web. An example is the program
  
   JSLint
  
  , developed by
  
   Douglas Crockford
  
  who has written extensively on the language. JSLint scans JavaScript code for conformance to a set of standards and guidelines. Many libraries for JavaScript, such as
  
   three.js
  
  , provide links to demonstration code that can be edited by users. They are also used as a pedagogical tool by institutions such as
  
   Khan Academy
  


    [102]
   

  to allow students to experience writing code in an environment where they can see the output of their programs, without needing any setup beyond a Web browser.
 
  Since JavaScript is getting more important for web development (frontend overtakes many aspects which were done in backend before), there is also more consideration done about performance. Especially mobile devices could have problems with rendering and processing unoptimized complex logic.
 
  A library for doing benchmarks is
  
   benchmark.js
  
  . A benchmarking library that supports high-resolution timers and returns statistically significant results
  
   [
   


      citation needed
     


   ]
  
  .
 
  Another tool is
  
   jsben.ch
  
  . An online JavaScript benchmarking tool, where code snippets can be tested against each other.
 
  JavaScript was initially developed in 1996 for use in the
  
   Netscape Navigator
  
  Web browser. In the same year Microsoft released an implementation for Internet Explorer. This implementation was called
  
   JScript
  
  due to trademark issues. In 1997 the first standardized version of the language was released under the name
  
   ECMAScript
  
  in the first edition of the ECMA-252 standard. The explicit versioning and opt-in of language features was Mozilla-specific and has been removed. Firefox 4 was the last version which referred to a JavaScript version (1.8.5). With new editions of the ECMA-262 standard, JavaScript language features are now often mentioned with their initial definition in the ECMA-262 editions.
 
  The following table is based on information from multiple sources.
  

    [103]
   



    [104]
   



    [105]
   



   JSON
  
  , or JavaScript Object Notation, is a general-purpose data interchange format that is defined as a subset of JavaScript's object literal syntax. Like much of JavaScript (regexps and anonymous functions as 1st class elements, closures, flexible classes, 'use strict'),
  
   JSON
  
  , except for replacing
  
   Perl
  
  's key-value operator '=>' by an
  
   RFC 822
  


    [107]
   

  inspired ':', is syntactically pure Perl.
 

   jQuery
  
  is a popular JavaScript library designed to simplify
  
   DOM
  
  -oriented client-side HTML scripting along with offering cross-browser compatibility because various browsers respond differently to certain vanilla JavaScript code.
 

   Underscore.js
  
  is a utility JavaScript library for data manipulation that is used in both client-side and server-side network applications.
 

   Angular
  
  and
  
   AngularJS
  
  are
  
   web application frameworks
  
  to use for developing
  
   single-page applications
  
  and also cross-platform mobile apps.
 

   React (JavaScript library)
  
  is an
  
   open-source
  
  JavaScript library providing a views that is rendered using components specified as custom HTML tags.
 
  Mozilla browsers currently support
  
   LiveConnect
  
  , a feature that allows JavaScript and Java to intercommunicate on the Web. However, Mozilla-specific support for LiveConnect was scheduled to be phased out in the future in favor of passing on the LiveConnect handling via
  
   NPAPI
  
  to the Java 1.6+ plug-in (not yet supported on the Mac as of March 2010
  

    [update]
   

  ).
  

    [108]
   

  Most browser inspection tools, such as
  
   Firebug
  
  in Firefox, include JavaScript interpreters that can act on the visible page's DOM.
 

   asm.js
  
  is a subset of JavaScript that can be run in any JavaScript engine or run faster in an
  
   ahead-of-time
  
  (AOT) compiling engine.
  

    [109]
   



   JSFuck
  
  is an
  
   esoteric programming language
  
  . Programs are written using only six different characters, but are still valid JavaScript code.
 

   p5.js
  


    [110]
   

  is an object oriented JavaScript library designed for artists and designers. It is based on the ideas of the
  
   Processing
  
  project but is for the web.
 

   jsben.ch
  
  is an online JavaScript benchmarking tool, where different code snippets can be tested against each other.
 
  As JavaScript is the most widely supported client-side language that can run within a Web browser, it has become an
  
   intermediate language
  
  for other languages to target. This has included both newly created languages and ports of existing languages. Some of these include:
 
  As JavaScript has unusual limitations – such as no explicit integer type, only double-precision binary floating point – languages that compile to JavaScript and do not take care to use the integer-converting shift and bitwise logical operators may have slightly different behavior than in other environments.
 
  A common misconception is that JavaScript is similar or closely related to
  
   Java
  
  . It is true that both have a C-like syntax (the C language being their most immediate common ancestor language). They also are both typically
  
   sandboxed
  
  (when used inside a browser), and JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's Math and Date objects are based on classes from Java 1.0,
  

    [117]
   

  but the similarities end there.
 

   Java
  
  and JavaScript both first appeared on 23 May 1995, but Java was developed by James Gosling of Sun Microsystems, and JavaScript by Brendan Eich of NetScape Communications.
 
  The differences between the two languages are more prominent than their similarities. Java has
  
   static typing
  
  , while JavaScript's typing is
  
   dynamic
  
  . Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java's objects are
  
   class-based
  
  , while JavaScript's are
  
   prototype-based
  
  . Finally, Java did not support
  
   functional programming
  
  until Java 8, while JavaScript has done so from the beginning, being influenced by
  
   Scheme
  
  .
 

