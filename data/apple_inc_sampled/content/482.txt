


   Computer software
  
  , or simply
  
   software
  
  , is that part of a
  
   computer system
  
  that consists of
  
   data
  
  or computer instructions, in contrast to the
  
   physical hardware
  
  from which the system is built. In
  
   computer science
  
  and
  
   software engineering
  
  , computer software is all
  
   information
  
  processed by
  
   computer systems
  
  ,
  
   programs
  
  and data. Computer software includes
  
   computer programs
  
  ,
  
   libraries
  
  and related non-executable
  
   data
  
  , such as
  
   online documentation
  
  or
  
   digital media
  
  . Computer hardware and software require each other and neither can be realistically used on its own.
 
  At the lowest level,
  
   executable code
  
  consists of
  
   machine language instructions
  
  specific to an individual
  
   processor
  
  —typically a
  
   central processing unit
  
  (CPU). A machine language consists of groups of
  
   binary values
  
  signifying processor instructions that change the state of the computer from its preceding state. For example, an instruction may change the value stored in a particular storage location in the computer—an effect that is not directly observable to the user. An instruction may also (indirectly) cause something to appear on a display of the computer system—a state change which should be visible to the user. The processor carries out the instructions in the order they are provided, unless it is instructed to
  
   "jump" to a different instruction
  
  , or is interrupted (by now
  
   multi-core processors
  
  are dominant, where each core can run instructions in order; then, however, each application software runs only on one core by default, but some software has been made to run on many).
 
  The majority of software is written in
  
   high-level programming languages
  
  that are easier and more efficient for programmers, meaning closer to a
  
   natural language
  
  .
  

    [1]
   

  High-level languages are translated into machine language using a
  
   compiler
  
  or an
  
   interpreter
  
  or a combination of the two. Software may also be written in a low-level
  
   assembly language
  
  , essentially, a vaguely
  
   mnemonic
  
  representation of a machine language using a natural language alphabet, which is translated into machine language using an
  
   assembler
  
  .
 


  An outline (
  
   algorithm
  
  ) for what would have been the first piece of software was written by
  
   Ada Lovelace
  
  in the 19th century, for the planned
  
   Analytical Engine
  
  . However, neither the Analytical Engine nor any software for it were ever created.
 
  The first theory about software—prior to creation of computers as we know them today—was proposed by Alan Turing in his 1935 essay
  
   Computable numbers with an application to the Entscheidungsproblem
  
  (decision problem).
 
  This eventually led to the creation of the twin academic fields of computer science and software engineering, which both study software and its creation. Computer science is more theoretical (Turing's essay is an example of computer science), whereas software engineering focuses on more practical concerns.
 
  However, prior to 1946, software as we now understand it—programs stored in the memory of stored-program digital computers—did not yet exist. The first electronic computing devices were instead rewired in order to "reprogram" them.
 
  On virtually all computer platforms, software can be grouped into a few broad categories.
 
  Based on the goal, computer software can be divided into:
 
  Programming tools are also software in the form of programs or applications that
  
   software developers
  
  (also known as
  
   programmers, coders, hackers
  
  or
  
   software engineers
  
  ) use to create,
  
   debug
  
  ,
  
   maintain
  
  (i.e. improve or fix), or otherwise
  
   support
  
  software. Software is written in one or more programming languages; there are many programming languages in existence, and each has at least one implementation, each of which consists of its own set of programming tools. These tools may be relatively self-contained programs such as
  
   compilers
  
  ,
  
   debuggers
  
  ,
  
   interpreters
  
  ,
  
   linkers
  
  , and
  
   text editors
  
  , that can be combined together to accomplish a task; or they may form an
  
   integrated development environment
  
  (IDE), which combines much or all of the functionality of such self-contained tools. IDEs may do this by either invoking the relevant individual tools or by re-implementing their functionality in a new way. An IDE can make it easier to do specific tasks, such as searching in files in a particular project. Many programming language implementations provide the option of using both individual tools or an IDE.
 
  Users often see things differently from programmers. People who use modern general purpose computers (as opposed to
  
   embedded systems
  
  ,
  
   analog computers
  
  and
  
   supercomputers
  
  ) usually see three layers of software performing a variety of tasks: platform, application, and user software.
 
  Computer software has to be "loaded" into the
  
   computer's storage
  
  (such as the
  
   hard drive
  
  or
  
   memory
  
  ). Once the software has loaded, the computer is able to
  
   execute
  
  the software. This involves passing
  
   instructions
  
  from the
  
   application software
  
  , through the system software, to the hardware which ultimately receives the instruction as
  
   machine code
  
  . Each instruction causes the computer to carry out an operation—moving
  
   data
  
  , carrying out a
  
   computation
  
  , or altering the
  
   control flow
  
  of instructions.
 
  Data movement is typically from one place in memory to another. Sometimes it involves moving data between memory and registers which enable high-speed data access in the CPU. Moving data, especially large amounts of it, can be costly. So, this is sometimes avoided by using "pointers" to data instead. Computations include simple operations such as incrementing the value of a variable data element. More complex computations may involve many operations and data elements together.
 


  Software quality is very important, especially for
  
   commercial
  
  and system software like
  
   Microsoft Office
  
  ,
  
   Microsoft Windows
  
  and
  
   Linux
  
  . If software is faulty (buggy), it can delete a person's work, crash the computer and do other unexpected things. Faults and errors are called "
  
   bugs
  
  " which are often discovered during alpha and beta testing. Software is often also a victim to what is known as
  
   software aging
  
  , the progressive performance degradation resulting from a combination of unseen bugs.
 
  Many bugs are discovered and eliminated (debugged) through
  
   software testing
  
  . However, software testing rarely—if ever—eliminates every bug; some programmers say that "every program has at least one more bug" (Lubarsky's Law).
  

    [4]
   

  In the
  
   waterfall
  
  method of software development, separate testing teams are typically employed, but in newer approaches, collectively termed
  
   agile software development
  
  , developers often do all their own testing, and demonstrate the software to users/clients regularly to obtain feedback. Software can be tested through
  
   unit testing
  
  ,
  
   regression testing
  
  and other methods, which are done manually, or most commonly, automatically, since the amount of code to be tested can be quite large. For instance,
  
   NASA
  
  has extremely rigorous software testing procedures for many operating systems and communication functions. Many NASA-based operations interact and identify each other through command programs. This enables many people who work at NASA to check and evaluate functional systems overall. Programs containing command software enable hardware engineering and system operations to function much easier together.
 
  The software's license gives the user the right to use the software in the licensed environment, and in the case of
  
   free software licenses
  
  , also grants other rights such as the right to make copies.
 

   Proprietary software
  
  can be divided into two types:
 

   Open source software
  
  , on the other hand, comes with a
  
   free software license
  
  , granting the recipient the rights to modify and redistribute the software.
 
  Software patents, like other types of patents, are theoretically supposed to give an inventor an exclusive, time-limited license for a
  
   detailed idea (e.g. an algorithm) on how to implement
  
  a piece of software, or a component of a piece of software. Ideas for useful things that software could
  
   do
  
  , and user
  
   requirements
  
  , are not supposed to be patentable, and concrete implementations (i.e. the actual software packages implementing the patent) are not supposed to be patentable either—the latter are already covered by copyright, generally automatically. So software patents are supposed to cover the middle area, between requirements and concrete implementation. In some countries, a requirement for the claimed invention to have an effect on the physical world may also be part of the requirements for a software patent to be held valid—although since
  
   all
  
  useful software has effects on the physical world, this requirement may be open to debate.
 
  Software patents are controversial in the software industry with many people holding different views about them. One of the sources of controversy is that the aforementioned split between initial ideas and patent does not seem to be honored in practice by patent lawyers—for example the patent for
  
   Aspect-Oriented Programming
  
  (AOP), which purported to claim rights over
  
   any
  
  programming tool implementing the idea of AOP, howsoever implemented. Another source of controversy is the effect on innovation, with many distinguished experts and companies arguing that software is such a fast-moving field that software patents merely create vast additional litigation costs and risks, and actually retard innovation. In the case of debates about software patents outside the United States, the argument has been made that large American corporations and patent lawyers are likely to be the primary beneficiaries of allowing or continue to allow software patents.
 
  Design and implementation of software varies depending on the complexity of the software. For instance, the design and creation of
  
   Microsoft Word
  
  took much more time than designing and developing
  
   Microsoft Notepad
  
  because the latter has much more basic functionality.
 
  Software is usually designed and created (aka coded/written/programmed) in
  
   integrated development environments
  
  (IDE) like
  
   Eclipse
  
  ,
  
   IntelliJ
  
  and
  
   Microsoft Visual Studio
  
  that can simplify the process and
  
   compile
  
  the software (if applicable). As noted in a different section, software is usually created on top of existing software and the
  
   application programming interface
  
  (API) that the underlying software provides like
  
   GTK+
  
  , JavaBeans or
  
   Swing
  
  . Libraries (APIs) can be categorized by their purpose. For instance, the
  
   Spring Framework
  
  is used for implementing
  
   enterprise applications
  
  , the
  
   Windows Forms
  
  library is used for designing graphical user interface (GUI) applications like
  
   Microsoft Word
  
  , and
  
   Windows Communication Foundation
  
  is used for designing
  
   web services
  
  . When a program is designed, it relies upon the API. For instance, if a user is designing a Microsoft Windows desktop application, he or she might use the
  
   .NET
  
  Windows Forms library to design the desktop application and call its APIs like
  
   Form1.Close()
  
  and
  
   Form1.Show()
  


    [5]
   

  to close or open the application, and write the additional operations him/herself that it needs to have. Without these APIs, the programmer needs to write these APIs him/herself. Companies like
  
   Oracle
  
  and
  
   Microsoft
  
  provide their own APIs so that many applications are written using their
  
   software libraries
  
  that usually have numerous APIs in them.
 

   Data structures
  
  such as
  
   hash tables
  
  ,
  
   arrays
  
  , and
  
   binary trees
  
  , and
  
   algorithms
  
  such as
  
   quicksort
  
  , can be useful for creating software.
 
  Computer software has special economic characteristics that make its design, creation, and distribution different from most other economic goods.
  
   [
   


      specify
     


   ]
  


    [6]
   



    [7]
   


  A person who creates software is called a
  
   programmer
  
  ,
  
   software engineer
  
  or
  
   software developer
  
  , terms that all have a similar meaning. More informal terms for programmer also exist such as "coder" and "
  

    hacker
   

  " – although use of the latter word may cause confusion, because it is more often used to mean
  
   someone who illegally breaks into computer systems
  
  .
 
  A great variety of software companies and programmers in the world comprise a software industry. Software can be quite a profitable industry:
  
   Bill Gates
  
  , the co-founder of
  
   Microsoft
  
  was the richest person in the world in 2009, largely due to his ownership of a significant number of shares in Microsoft, the company responsible for
  
   Microsoft Windows
  
  and
  
   Microsoft Office
  
  software products.
 
  Non-profit software organizations include the
  
   Free Software Foundation
  
  ,
  
   GNU Project
  
  and
  
   Mozilla Foundation
  
  . Software standard organizations like the
  
   W3C
  
  ,
  
   IETF
  
  develop recommended software standards such as
  
   XML
  
  ,
  
   HTTP
  
  and
  
   HTML
  
  , so that software can interoperate through these standards.
 
  Other well-known large software companies include
  
   Oracle
  
  ,
  
   Novell
  
  ,
  
   SAP
  
  ,
  
   Symantec
  
  ,
  
   Adobe Systems
  
  , and
  
   Corel
  
  , while small companies often provide innovation.
 